---
import { getLangFromUrl, useTranslations } from "@/i18n/utils";
import { TEAM_MEMBER_BACKGROUNDS_COLORS, cn } from "@/lib/utils";
import "@/styles/globals.css";
import RoundedCorner from "../ui/RoundedCorner.astro";

type Props = {
  name: string;
  email: string;
  image: string;
  cp?: string;
  formations?: {
    formationItem: string;
  }[];
  preferencesArea?: {
    preferenceaAreaItem: string;
  }[];
  teamMemberIndex: number;
  role: string;
};

const {
  name,
  email,
  image,
  cp,
  formations,
  preferencesArea,
  teamMemberIndex,
  role,
} = Astro.props;

const { teamPageBackground: fillBackground } =
  TEAM_MEMBER_BACKGROUNDS_COLORS[
    teamMemberIndex % TEAM_MEMBER_BACKGROUNDS_COLORS.length
  ];

const activeLang = getLangFromUrl(Astro.url);
const translationContent = useTranslations(activeLang);

const {
  emailText,
  professionalLicense,
  education,
  areasOfPractice,
  goBackText,
} = translationContent.teamMemberPage;
---

<main class="h-[calc(100vh-6.25rem)] mt-[6.25rem] bg-[#E6E7E9]">
  <section class="relative w-full px-24 py-12 h-full">
    <div class="flex flex-col gap-6">
      <h6 class="text-4xl capitalize font-bold">
        {name}
      </h6>

      <p class="text-lg font-bold">{role}</p>

      <a target="_blank" href=`mailto:${email}`>
        <p class="text-lg">
          <b>{emailText}: {" "}</b>
          <span class="underline"> {email}</span>
        </p>
      </a>
      {
        cp ? (
          <p class="text-lg capitalize">
            <b>{professionalLicense}: </b> {cp}
          </p>
        ) : null
      }
      {
        formations && formations?.length > 0 ? (
          <div class="flex flex-col gap-6 capitalize">
            <p class="text-lg">
              <b>{education}: </b>
            </p>
            <ul class="flex flex-col gap-2 px-8">
              {formations?.map((formation) => (
                <li class="text-base list-disc">{formation.formationItem}</li>
              ))}
            </ul>
          </div>
        ) : null
      }
      {
        preferencesArea && preferencesArea.length > 0 ? (
          <div class="flex flex-col gap-6 capitalize">
            <p class="text-lg">
              <b>{areasOfPractice}: </b>
            </p>
            <ul class="flex flex-col gap-2 px-8">
              {preferencesArea?.map((preferenceArea) => (
                <li class="text-base list-disc">
                  {preferenceArea.preferenceaAreaItem}
                </li>
              ))}
            </ul>
          </div>
        ) : null
      }
    </div>

    <div class="absolute left-1/4 right-0 bottom-0">
      <RoundedCorner className={cn(fillBackground)} />
    </div>
  </section>
</main>
